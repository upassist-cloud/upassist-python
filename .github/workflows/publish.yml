name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tomli

      - name: Validate version
        run: |
          # Extract version from pyproject.toml
          PYPROJECT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          # Extract version from release tag
          RELEASE_VERSION="${GITHUB_REF#refs/tags/v}"
          
          echo "PyProject version: $PYPROJECT_VERSION"
          echo "Release version: $RELEASE_VERSION"
          
          if [ "$PYPROJECT_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Version mismatch: pyproject.toml version ($PYPROJECT_VERSION) does not match release version ($RELEASE_VERSION)"
            exit 1
          fi

  test-publish:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*

  publish:
    needs: test-publish
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/upassist
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Verify package contents
        run: |
          # Check for common security issues
          if grep -r "password\|secret\|key\|token" dist/; then
            echo "Potential security issue: sensitive information found in package"
            exit 1
          fi
          
          # Verify package structure
          if ! python -c "import upassist; print(upassist.__version__)"; then
            echo "Package import test failed"
            exit 1
          fi

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/* 